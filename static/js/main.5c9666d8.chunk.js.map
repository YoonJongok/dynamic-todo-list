{"version":3,"sources":["atoms.ts","components/CreateToDo.tsx","components/ToDoList.tsx","components/Board.tsx","components/CreateCategory.tsx","App.tsx","reportWebVitals.ts","index.tsx","theme.ts"],"names":["TODO_LIST","todoState","atom","key","default","TO_DO","DOING","DONE","Form","styled","form","Input","input","Button","button","CreateToDo","category","useForm","register","handleSubmit","setValue","setToDos","useSetRecoilState","onSubmit","toDo","oldTodos","newTodo","id","Date","now","text","localStorage","setItem","JSON","stringify","type","placeholder","List","li","TaskArea","div","ToDoList","categoryTitle","useRecoilState","toDos","handleOnClick","event","targetCategory","currentTarget","value","parentElement","targetLiName","children","firstChild","textContent","listCopy","taskObj","find","val","removedlist","filter","targetedList","insertedDataList","onClick","targetTask","oldToDos","filteredBoard","Object","keys","map","index","SBoard","props","theme","boardBgColor","BoardArea","ListContainer","ul","TitleArea","Title","h3","BtnArea","span","btnBgColor","btnAccentColor","Board","console","log","filtered","entries","newToDos","fromEntries","icon","faWindowClose","todo","SButton","CreateCategory","setTodos","Container","CategoryBoard","App","useEffect","getItem","storage","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","bgColor","textColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c9666d8.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const TODO_LIST = \"TODO_LIST\";\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\nexport interface ITodoState {\n  [key: string]: ITodo[];\n}\n\nexport const todoState = atom<ITodoState>({\n  key: \"todoState\",\n  default: {\n    TO_DO: [],\n    DOING: [],\n    DONE: [],\n  },\n});\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { todoState, TODO_LIST } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\nexport const Form = styled.form`\n  width: 80%;\n  margin: 0 auto;\n  height: 1rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\n\nconst Input = styled.input`\n  width: 80%;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  font-size: 16px;\n  background-color: white;\n  padding: 3px 12px;\n`;\n\nexport const Button = styled.button`\n  padding: 0.5em 1em 0.3em;\n  border: rgba(255, 255, 255, 0);\n  border-radius: 2px;\n  text-decoration: none;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 500;\n  color: #ffffff;\n  text-shadow: 0 0.04em 0.04em rgba(0, 0, 0, 0.35);\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.2s;\n  background-color: #ffbe76;\n  &:hover {\n    â€ƒborder: 0.16em solid rgba(255, 255, 255, 1);\n    background-color: #f0932b;\n  }\n`;\n\ninterface ICreateToDoProps {\n  category: string;\n}\n\nfunction CreateToDo({ category }: ICreateToDoProps) {\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const setToDos = useSetRecoilState(todoState);\n\n  const handleValid = ({ toDo }: IForm) => {\n    if (!toDo) return;\n    setToDos((oldTodos) => {\n      const newTodo = {\n        id: Date.now(),\n        text: toDo,\n      };\n      localStorage.setItem(\n        TODO_LIST,\n        JSON.stringify({\n          ...oldTodos,\n          [category]: [newTodo, ...oldTodos[category]],\n        })\n      );\n      return { ...oldTodos, [category]: [newTodo, ...oldTodos[category]] };\n    });\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <Form onSubmit={handleSubmit(handleValid)}>\n      <Input type=\"text\" placeholder=\"Add the task\" {...register(\"toDo\")} />\n      <Button type=\"submit\">Add</Button>\n    </Form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { ITodo, todoState, TODO_LIST } from \"../atoms\";\n\nconst List = styled.li`\n  width: 100%;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  margin-bottom: 0.5em;\n\n  span:last-child {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: wrap;\n    margin: 0 1em;\n  }\n`;\nconst TaskArea = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  span {\n    margin: 0 0.8em 0 1.2rem;\n    color: #130f40;\n    font-weight: 600;\n    font-size: 1.3em;\n  }\n  button {\n    border: none;\n    border-radius: 4px;\n    font-size: 0.8em;\n    padding: 0.3em 0.6rem 0.4em;\n    text-align: center;\n    color: white;\n    background-color: #badc58;\n    cursor: pointer;\n    text-shadow: 0 0.04em 0.04em rgba(0, 0, 0, 0.35);\n    text-align: center;\n    transition: all 0.2s;\n    &:hover {\n      background-color: #eb4d4b;\n    }\n  }\n`;\n\nconst Button = styled.button`\n  padding: 0.5em 1em 0.3em;\n  margin: 0 0.5em 0.5em 0;\n  border: rgba(255, 255, 255, 0);\n  border-radius: 2em;\n  text-decoration: none;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 500;\n  color: #ffffff;\n  text-shadow: 0 0.04em 0.04em rgba(0, 0, 0, 0.35);\n  text-align: center;\n  transition: all 0.2s;\n  background-color: #ffbe76;\n\n  &:hover {\n    border: 0.16em solid rgba(255, 255, 255, 1);\n    background-color: #f0932b;\n  }\n`;\n\ninterface ITodoListProps {\n  id: number;\n  text: string;\n  categoryTitle: string;\n}\n\nfunction ToDoList({ categoryTitle, id, text }: ITodoListProps) {\n  const [toDos, setToDos] = useRecoilState(todoState);\n\n  const handleTaskDeleteBtn = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const targetTask =\n      event.currentTarget.parentElement?.children[0].textContent;\n\n    setToDos((oldToDos) => {\n      // grab a targeted category list and filter it.\n      const filteredBoard = [...oldToDos[categoryTitle]].filter(\n        (value) => value.text !== targetTask\n      );\n\n      localStorage.setItem(\n        TODO_LIST,\n        JSON.stringify({\n          ...oldToDos,\n          [categoryTitle]: [...filteredBoard],\n        })\n      );\n      return {\n        ...oldToDos,\n        [categoryTitle]: [...filteredBoard],\n      };\n    });\n  };\n\n  const handleOnClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const targetCategory = event.currentTarget.value;\n    const { parentElement } = event.currentTarget;\n    const targetLiName =\n      parentElement?.parentElement?.children[0].firstChild?.textContent;\n\n    setToDos((oldTodos) => {\n      // 1. grab the obj from the list\n      // 2. remove that obj from the list\n      // 3. find the targetedCategory from the OldTodos\n      // 4. insert obj to the targed Category\n      const listCopy = [...oldTodos[categoryTitle]];\n      const taskObj = listCopy.find(\n        (val) => val.text === targetLiName\n      ) as ITodo;\n\n      const removedlist = listCopy.filter((val) => val !== taskObj);\n      const targetedList = [...oldTodos[targetCategory]];\n      const insertedDataList = [...targetedList, taskObj];\n      localStorage.setItem(\n        TODO_LIST,\n        JSON.stringify({\n          ...oldTodos,\n          [targetCategory]: [...insertedDataList],\n          [categoryTitle]: [...removedlist],\n        })\n      );\n      return {\n        ...oldTodos,\n        [targetCategory]: [...insertedDataList],\n        [categoryTitle]: [...removedlist],\n      };\n    });\n  };\n\n  return (\n    <List>\n      <TaskArea>\n        <span>{text}</span>\n        <button onClick={handleTaskDeleteBtn}>delete</button>\n      </TaskArea>\n      <span>\n        {Object.keys(toDos).map(\n          (category, index) =>\n            category !== categoryTitle && (\n              <Button onClick={handleOnClick} key={index} value={category}>\n                {category}\n              </Button>\n            )\n        )}\n      </span>\n    </List>\n  );\n}\n\nexport default ToDoList;\n","import { faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { ITodo, todoState, TODO_LIST } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDoList from \"./ToDoList\";\n\nconst SBoard = styled.div`\n  width: 320px;\n  background-color: ${(props) => props.theme.boardBgColor};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid;\n  border-radius: 10px;\n  margin-bottom: 2rem;\n  overflow: hidden;\n  h3 {\n    margin: 10px;\n  }\n`;\n\nconst BoardArea = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nexport const Form = styled.form`\n  width: 80%;\n  margin: 0 auto;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 1rem;\n  input {\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst ListContainer = styled.ul`\n  width: 100%;\n  min-height: 320px;\n`;\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  category: string;\n}\n\nexport const TitleArea = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 0.3em 1rem 0.5em;\n  font-size: 1.5rem;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  span {\n    width: 100%;\n  }\n`;\nconst Title = styled.h3`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n`;\n\nconst BtnArea = styled.span`\n  display: flex;\n  height: 100%;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0 0 0.4em;\n  font-size: 1.2em;\n  border: none;\n  cursor: pointer;\n  text-align: center;\n  text-decoration: none;\n  color: ${(props) => props.theme.btnBgColor};\n  transition: 0.1s ease-in;\n  &:hover {\n    color: ${(props) => props.theme.btnAccentColor};\n  }\n`;\n\nfunction Board({ toDos, category }: IBoardProps) {\n  const setToDos = useSetRecoilState(todoState);\n  const handleCloseBtn = (event: React.MouseEvent<HTMLSpanElement>) => {\n    const targetCategory = event.currentTarget.parentElement?.children[1]\n      .textContent as string;\n    console.log(targetCategory);\n    setToDos((oldToDos) => {\n      console.log(\"THis is old todos: \", oldToDos);\n      const filtered = Object.entries(oldToDos).filter(\n        (value) => value[0] !== targetCategory\n      );\n      const newToDos = Object.fromEntries(filtered);\n      localStorage.setItem(TODO_LIST, JSON.stringify(newToDos));\n      return newToDos;\n    });\n  };\n\n  return (\n    <SBoard>\n      <TitleArea>\n        <span></span>\n        <Title>{category}</Title>\n        <BtnArea onClick={handleCloseBtn}>\n          <FontAwesomeIcon icon={faWindowClose} />\n        </BtnArea>\n      </TitleArea>\n      <BoardArea>\n        <CreateToDo category={category} />\n        <ListContainer>\n          {toDos.map((todo, index) => (\n            <ToDoList key={index} {...todo} categoryTitle={category} />\n          ))}\n        </ListContainer>\n      </BoardArea>\n    </SBoard>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { todoState, TODO_LIST } from \"../atoms\";\nimport { Button } from \"./CreateToDo\";\n\nexport interface ICategoryForm {\n  category: string;\n}\n\nconst Form = styled.form`\n  width: 80%;\n  height: 25px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 1rem;\n  input {\n    width: 250px;\n    border: 2px solid #ccc;\n    border-radius: 4px;\n    font-size: 16px;\n    background-color: white;\n    padding: 3px 12px;\n  }\n`;\nconst SButton = styled(Button)``;\n\nfunction CreateCategory() {\n  const { register, handleSubmit, setValue } = useForm<ICategoryForm>();\n  const setTodos = useSetRecoilState(todoState);\n\n  const handleValid = ({ category }: ICategoryForm) => {\n    if (!category) return;\n    setTodos((oldTodos) => {\n      localStorage.setItem(\n        TODO_LIST,\n        JSON.stringify({ ...oldTodos, [category]: [] })\n      );\n      return { ...oldTodos, [category]: [] };\n    });\n    setValue(\"category\", \"\");\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(handleValid)}>\n      <input\n        type=\"text\"\n        placeholder=\"Add the category\"\n        {...register(\"category\")}\n      />\n      <SButton type=\"submit\">Add</SButton>\n    </Form>\n  );\n}\n\nexport default CreateCategory;\n","import React, { useEffect } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { todoState, TODO_LIST } from \"./atoms\";\nimport Board from \"./components/Board\";\nimport CreateCategory from \"./components/CreateCategory\";\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100vw;\n  max-width: 680px;\n  margin: 2rem auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  padding-bottom: 0.5rem;\n  font-size: 4rem;\n  font-weight: 600;\n  color: ${(props) => props.theme.btnAccentColor};\n`;\n\nconst CategoryBoard = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(todoState);\n\n  useEffect(() => {\n    if (localStorage.getItem(TODO_LIST)) {\n      const storage = JSON.parse(localStorage.getItem(TODO_LIST) as string);\n      setToDos(storage);\n    }\n  }, [setToDos]);\n\n  return (\n    <Container>\n      <Title>\n        <h1>To Do List</h1>\n      </Title>\n      <CreateCategory />\n      <CategoryBoard>\n        {Object.keys(toDos).map((category, index) => (\n          <Board key={index} category={category} toDos={toDos[category]} />\n        ))}\n      </CategoryBoard>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { lightTheme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={lightTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DefaultTheme } from \"styled-components\";\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"#30336b\",\n  textColor: \"#130f40\",\n  boardBgColor: \"#686de0\",\n  btnBgColor: \"#ffbe76\",\n  btnAccentColor: \"#f0932b\",\n};\n"],"sourceRoot":""}